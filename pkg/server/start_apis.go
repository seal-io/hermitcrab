package server

import (
	"context"
	"errors"

	"github.com/seal-io/hermitcrab/pkg/apis"
	"github.com/seal-io/hermitcrab/pkg/provider"
)

type startApisOptions struct {
	ProviderService *provider.Service
}

func (r *Server) startApis(ctx context.Context, opts startApisOptions) error {
	srv, err := apis.NewServer()
	if err != nil {
		return err
	}

	serveOpts := apis.ServeOptions{
		SetupOptions: apis.SetupOptions{
			ConnQPS:               r.ConnQPS,
			ConnBurst:             r.ConnBurst,
			WebsocketConnMaxPerIP: r.WebsocketConnMaxPerIP,
			ProviderService:       opts.ProviderService,
		},
		BindAddress:       r.BindAddress,
		BindWithDualStack: r.BindWithDualStack,
	}

	switch {
	default:
		serveOpts.TlsMode = apis.TlsModeSelfGenerated
		serveOpts.TlsCertDir = r.TlsCertDir
	case !r.EnableTls:
		serveOpts.TlsMode = apis.TlsModeDisabled
	case r.TlsCertFile != "" && r.TlsPrivateKeyFile != "":
		serveOpts.TlsMode = apis.TlsModeCustomized
		serveOpts.TlsCertFile = r.TlsCertFile
		serveOpts.TlsPrivateKeyFile = r.TlsPrivateKeyFile
	case len(r.TlsAutoCertDomains) != 0:
		serveOpts.TlsMode = apis.TlsModeAutoGenerated
		serveOpts.TlsCertified = true
		serveOpts.TlsCertDir = r.TlsCertDir
		serveOpts.TlsAutoCertDomains = r.TlsAutoCertDomains
	}

	err = srv.Serve(ctx, serveOpts)
	if err != nil && !errors.Is(err, context.Canceled) {
		return err
	}

	return nil
}
